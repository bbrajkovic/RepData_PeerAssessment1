swirl()
next()
?Devices
next()
testInheritedMethods()
plot(dataset)
plot(eruptions,waiting)
swirl()
plot(x,z)
plot(volcano)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
next()
title(main = "Old Faithful Geyser data")
dev.cur()
command pdf(file="myplot.pdf"
command pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
command pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
head(cars)
with(cars, plot(speed, dist))
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
head(state)
table(state$region)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
head(mpg)
dim(mpg)
dim(mpg)
table(mpg$model)
table(mpg$model)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
hist(airquality$Ozone)
table(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
length(par())
length(par())
names(par())
names(par())
par()$pin
par()$pin
par()$fg
par()$fg
par()$pch
1
par()$lty
1
11
1
plot(airquality$Wind, type="n",airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality, col = "red", pch=8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["formula"]]
p[["x.limits"]]
p[["x.limits"]]
table(f)
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
v2
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
diamonds
str(diamonds)
str(diamonds)
table(diamonds$color)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
1
sample(colors(),10)
1
pal <- colorRamp(c("red","blue"))
1
pal(0)
1
pal(1)
swirl()
1
pal(seq(0,1,len=6))
next()
swirl()
1
p1 <- colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(2)
p1(6)
1
0xcc
1
p2 <- colorRampPalette(c("red","yellow"))
1
p2(2)
1
p2(10)
1
showMe(p1(20))
1
showMe(p2(20))
1
showMe(p2(2))
1
p1
1
?rgb
1
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
1
p3(5)
1
plot(x,y,pch=19,col=rgb(0,.5,.5))
1
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
1
cols <- brewer.pal(3, "BuGn")
1
showMe(cols)
1
pal <- colorRampPalette(cols)
1
showMe(pal(20))
1
image(volcano, col = pal(20))
1
image(volcano, col = p1(20))
1
str(mpg)
1
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
1
qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
1
qplot(y=hwy, data = mpg, color = drv)
1
myhigh
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
1
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
1
qplot(hwy, data = mpg, fill = drv)
1
qplot(displ, hwy, data = mpg, facets = . ~ drv)
1
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
1
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy) )
g
summary(g)
summary(g)
g+geom_point()
1
g+geom_point()+geom_smooth()
1
g+geom_point()+geom_smooth(method="lm")
1
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
1
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
1
g+geom_point(color="pink",size=4,alpha=1/2)
1
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
1
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
1
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
1
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
1
plot(myx, myy, type = "l", ylim = c(-3,3))
1
g <- ggplot(testdat, aes(x = myx, y = myy)) at the command prompt.
1g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
1
g + geom_line()
1
g + geom_line() + ylim(-3,3)
1
g + geom_line() + coord_cartesian(ylim=c(-3,3))
1
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
1
g + geom_point()
1
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
1
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
1
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="HighwayMileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
1
str(diamonds)
1
qplot(price,data=diamonds)
1
range(diamonds$price)
1
qplot(price,data=diamonds,binwidth=18497/30)
1
brk
1
info()
1
info(counts)
counts
1
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
1
qplot(price,data=diamonds,geom="density")
1
1
qplot(price,data=diamonds,geom="density",color=cut)
1
qplot(carat,price,data=diamonds)
1
qplot(carat,price,data=diamonds, shape=cut)
1
qplot(carat,price,data=diamonds, color=cut)
1
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
1
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
1
g <- ggplot(diamonds,aes(depth,price))
1
summary(g)
1
g+geom_point(alpha=1/3)
1
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
1
cutpoints
1
diamonds$car2 <- cut(diamonds$carat,cutpoints)
1
g <- ggplot(diamonds,aes(depth,price))
1
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
1
diamonds[myd,]
1
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
1
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(dplyr)
library(lubridate)
echo
?echo
library(dplyr)
library(lubridate)
library(ggplot2)
## Data loading
data <- read.csv("activity.csv")                                                # Reading data from file
data <- as_tibble(data)                                                         # Convertind data frame to tibble
data$date<-as.Date(data$date, "%Y-%m-%d")                                       # Formatting date variable to correct type
## Mean total number of steps taken per day ##
# Calculations
total_steps<-sum(data$steps,na.rm=TRUE)                                         # Total number of steps
total_steps_per_day <- aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)    # Total number of steps per day
mean_total_steps_per_day <- mean(total_steps_per_day$steps)                     # Mean number of steps per day
median_total_steps_per_day <- median(total_steps_per_day$steps)                 # Median number of steps per day
# Exploring data
hist(total_steps_per_day$steps)                                                 # Ploting histogram of total steps per day
## Average daily activity pattern
# Calculations
avg_5 <- aggregate(steps~interval, data = data, FUN = mean, na.rm = TRUE)       # 5- minute interval average
# Exploring data
plot(avg_5$interval, avg_5$steps, type = "l")                                   # Ploting line chart of avg_5
max_steps <- max(five_minutes_average$steps)
for (i in 1:288)
{
if (five_minutes_average$steps[i] == max_steps)
five_minute_interval_at_max_steps <- five_minutes_average$interval[i]
}
five_minute_interval_at_max_steps
library(dplyr)
library(lubridate)
library(ggplot2)
## Data loading
data <- read.csv("activity.csv")                                                # Reading data from file
data <- as_tibble(data)                                                         # Convertind data frame to tibble
data$date<-as.Date(data$date, "%Y-%m-%d")                                       # Formatting date variable to correct type
## Mean total number of steps taken per day ##
# Calculations
total_steps<-sum(data$steps,na.rm=TRUE)                                         # Total number of steps
total_steps_per_day <- aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)    # Total number of steps per day
mean_total_steps_per_day <- mean(total_steps_per_day$steps)                     # Mean number of steps per day
median_total_steps_per_day <- median(total_steps_per_day$steps)                 # Median number of steps per day
# Exploring data
hist(total_steps_per_day$steps)                                                 # Ploting histogram of total steps per day
## Average daily activity pattern
# Calculations
avg_5 <- aggregate(steps~interval, data = data, FUN = mean, na.rm = TRUE)       # 5- minute interval average
# Exploring data
plot(avg_5$interval, avg_5$steps, type = "l")                                   # Ploting line chart of avg_5
library(dplyr)
library(lubridate)
library(ggplot2)
## Data loading
data <- read.csv("activity.csv")                                                # Reading data from file
data <- as_tibble(data)                                                         # Convertind data frame to tibble
data$date<-as.Date(data$date, "%Y-%m-%d")                                       # Formatting date variable to correct type
## Mean total number of steps taken per day ##
# Calculations
total_steps<-sum(data$steps,na.rm=TRUE)                                         # Total number of steps
total_steps_per_day <- aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)    # Total number of steps per day
mean_total_steps_per_day <- mean(total_steps_per_day$steps)                     # Mean number of steps per day
median_total_steps_per_day <- median(total_steps_per_day$steps)                 # Median number of steps per day
# Exploring data
hist(total_steps_per_day$steps)                                                 # Ploting histogram of total steps per day
## Average daily activity pattern
# Calculations
avg_5 <- aggregate(steps~interval, data = data, FUN = mean, na.rm = TRUE)       # 5- minute interval average
# Exploring data
plot(avg_5$interval, avg_5$steps, type = "l")                                   # Ploting line chart of avg_5
setwd("~/Desktop/Coursera/wd")
# Calculations
total_steps<-sum(data$steps,na.rm=TRUE)                                         # Total number of steps
library(dplyr)
library(lubridate)
library(ggplot2)
## Data loading
data <- read.csv("activity.csv")                                                # Reading data from file
data <- as_tibble(data)                                                         # Convertind data frame to tibble
data$date<-as.Date(data$date, "%Y-%m-%d")                                       # Formatting date variable to correct type
## Mean total number of steps taken per day ##
# Calculations
total_steps<-sum(data$steps,na.rm=TRUE)                                         # Total number of steps
total_steps_per_day <- aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)    # Total number of steps per day
mean_total_steps_per_day <- mean(total_steps_per_day$steps)                     # Mean number of steps per day
median_total_steps_per_day <- median(total_steps_per_day$steps)                 # Median number of steps per day
# Exploring data
hist(total_steps_per_day$steps)                                                 # Ploting histogram of total steps per day
## Average daily activity pattern
# Calculations
avg_5 <- aggregate(steps~interval, data = data, FUN = mean, na.rm = TRUE)       # 5- minute interval average
# Exploring data
plot(avg_5$interval, avg_5$steps, type = "l")                                   # Ploting line chart of avg_5
length(avg_5)
dim(avg_5)
dim(avg_5)[1]
max_avg_5
source('~/Desktop/Coursera/wd/main_script.R')
max_avg_5
source('~/Desktop/Coursera/wd/main_script.R')
print("Maximum number of steps within 5 minutes interval is:" + 'max_avg_5')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
?print
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
sprintf("Maximum number of steps within 5 minutes interval is: %s",max_avg_5)
source('~/Desktop/Coursera/wd/main_script.R')
source('~/Desktop/Coursera/wd/main_script.R')
?plot
?abline
abline(v=max_avg_5)
abline(v=max_avg_5, col= "red")
abline(v=max_avg_5,col="red", lwd=3, lty=2)
source('~/Desktop/Coursera/wd/main_script.R')
max(avg_5)
max(avg_5$steps)
max(avg_5$interval)
?max
?filter()
?filter
?filter_if
filter(avg_5)
filter(avg_5,avg_5$steps==max(avg_5$steps))
max_avg_5<-filter(avg_5,avg_5$steps==max(avg_5$steps))
max_avg_5
max_avg_5[1]
max_avg_5[[1]
]
max_avg_5<-filter(avg_5,avg_5$steps==max(avg_5$steps))[[1]]
source('~/Desktop/Coursera/wd/main_script.R')
group(data)
table(data)
str(data)
q<-str(data)
q
data
data$steps
summarise(data)
summarise(data$steps)
is.na<-data$steps
is.na(data$steps)
data$steps[is.na(data$steps)]
no_na<-is.na(data$steps)
q<-data$steps[no_na==FALSE]
q
no_na<-is.na(data$steps)
q<-data$steps[no_na==FALSE]
length(data$steps)- length(is.na(data$steps))
length(data$steps)
length(is.na(data$steps))
q<-is.na(data$steps)
length(data$steps)- length(is.na(data$steps[is.na(data$steps)==FALSE]))
hist(aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)$steps)
hist((aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE))$steps)
hist(aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE)$steps)
hist((aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE))$steps)
total_steps<-sum(data$steps,na.rm=TRUE)
